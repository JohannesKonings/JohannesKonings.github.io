{"pageProps":{"frontmatter":{"layout":"post","title":"GitHub actions example for automatic release drafts and changelog.md creation","date":"2021-02-28 08:15:18","published":false,"summary":"This post is how to define your release draft via labels in pull requests and the update of the changelog.md after publishing a release","categories":"github","thumbnail":"github","tags":["github","github actions"]},"content":"\n# What are GitHub actions?\n\nThat is well described in this [post](https://dev.to/github/what-are-github-actions-3pml) by [Brian Douglas](https://dev.to/bdougieyo).\nHe has also an entire [post series](https://dev.to/github/28-days-of-github-action-tips-4opg) about tips around GitHub actions.\n\n# Which problem should be solved?\n\nThere are different solutions to create automatic releases based on certain criteria. Again [Brian Douglas](https://dev.to/bdougieyo) pointed out some possibilities in this [post](https://dev.to/github/generate-semantic-release-with-github-actions-2lll).\n\nFor [this](https://github.com/abap-observability-tools) open-source project, the requirement was to determine the release structure via labels at the pull request. This was preferred over [conventional commits](https://www.conventionalcommits.org/en/v1.0.0/).\nAlso, not every merged pull request should automatically trigger a new release. Therefore, a draft is the right way to collect the changes and publish a version whenever needed.\n\nAddionatylly to the GitHub releases, a changelog.md helps see the version history, for example, directly in the code editor.\nThat changelog.md should be updated every time a release is published.\n\nThe combination [Release Drafter](https://github.com/release-drafter/release-drafter) and [gren](https://github.com/github-tools/github-release-notes) is the approach to solve the problem.\n\n# Configure Release Drafter\n\nTo configure [Release Drafter](https://github.com/release-drafter/release-drafter) in the default way, it needs two files and the according labels.\n\nThis [template](https://github.com/abap-observability-tools/abap-log-exporter/blob/main/.github/release-drafter.yml) describes the structure of the release draft and the needed labels.\nThe full path is `.github/release-drafter.yml`\n\n```yaml\nname-template: 'v$RESOLVED_VERSION üåà'\ntag-template: 'v$RESOLVED_VERSION'\ncategories:\n  - title: 'üöÄ Features'\n    labels:\n      - 'feature'\n      - 'enhancement'\n  - title: 'üêõ Bug Fixes'\n    labels:\n      - 'fix'\n      - 'bugfix'\n      - 'bug'\n  - title: 'üß∞ Maintenance'\n    label: 'chore'\n  - title: 'üß∫ Miscellaneous' #Everything except ABAP\n    label: 'misc'\nchange-template: '- $TITLE @$AUTHOR (#$NUMBER)'\nchange-title-escapes: '\\<*_&' # You can add # and @ to disable mentions, and add ` to disable code blocks.\nversion-resolver:\n  major:\n    labels:\n      - 'major'\n  minor:\n    labels:\n      - 'minor'\n  patch:\n    labels:\n      - 'patch'\n  default: patch\ntemplate: |\n  ## Changes\n  $CHANGES\n```\n\nThe GitHub actions [configuration](https://github.com/abap-observability-tools/abap-log-exporter/blob/main/.github/workflows/release-drafter.yml) like this:\n\n`github/workflows/release-drafter.yml`\n\n```yaml\nname: Release Drafter\n\non:\n  push:\n    # branches to consider in the event; optional, defaults to all\n    branches:\n      - main\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      # Drafts your next Release notes as Pull Requests are merged into \"master\"\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```\n# Configure gren\n\nThe releases are published manually at certain times. This trigger [this](https://github.com/abap-observability-tools/abap-log-exporter/blob/main/.github/workflows/update-changelog.yml) configuration.\n\n```yaml\nname: \"update changelog\"\non:\n  release:\n    types: [published]\n\njobs:\n  update-changelog:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n\n    - name: Update changelog\n      run: |\n        npm install github-release-notes\n        export GREN_GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}\n        npm run overrideChangelog\n    - name: Create Pull Request\n      uses: peter-evans/create-pull-request@v3\n      with:\n        commit-message: update changelog\n        title: Update Changelog\n        body: Update changelog to reflect release changes\n        branch: update-changelog\n        base: main\n```\n\nThe command `\"overrideChangelog\": \"gren changelog --override\"` from the [package.json](https://github.com/abap-observability-tools/abap-log-exporter/blob/main/package.json) update then the changelog.md.\n\nBecause of the main branch protection, it's not possible to push the changes directly back. This will do this via a pull request with the GitHub action [create-pull-request](https://github.com/marketplace/actions/create-pull-request).\n\n# How it looks like\n\nThe collection of the changes in a release draft.\n\n![release-draft]({{ site.baseurl }}/img/2021-02-28-github_automatic_releases_and changelog/release-draft.png)\n\nThe labels in a pull request.\n\n![label-pull-request]({{ site.baseurl }}/img/2021-02-28-github_automatic_releases_and changelog/label-pull-request.png)\n\nThe result in the GitHub release.\n\n![minor-enhancement]({{ site.baseurl }}/img/2021-02-28-github_automatic_releases_and changelog/minor-enhancement.png)\n\nThe result in the CHANGELOG.md.\n\n![changelog]({{ site.baseurl }}/img/2021-02-28-github_automatic_releases_and changelog/changelog.png)\n\n\n# Code\n\n[https://github.com/abap-observability-tools](https://github.com/abap-observability-tools)\n\n"},"__N_SSG":true}