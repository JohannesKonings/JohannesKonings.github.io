{"pageProps":{"frontmatter":{"layout":"post","title":"Example how to analyze DynamoDB item changes with Kinesis and Athena created with CDK","date":"2021-08-31 08:15:18","published":false,"summary":"This post is how stream data changes of a DynamoDb table via Kinesis Data Stream and Kinesis Firehose to S3, and analyze the data with Athena. Build with CDK.","categories":"aws","thumbnail":"aws_kinesis","tags":["aws","aws kinesis","aws athena","aws cdk"]},"content":"\nThis is the same like described [here]({{ site.baseurl }}/aws/2021/08/27/aws_example_ddb_analytics/), but instead of terraform it's build with [CDK](https://aws.amazon.com/cdk/).\n\nTo bootrap the project run this command: `cdk init app --language typescript`\nFurther information are [here](https://docs.aws.amazon.com/cdk/latest/guide/hello_world.html)\n\nAll the services are in [this](https://github.com/JohannesKonings/test-aws-dynamodb-athena-cdk/blob/main/cdk/lib/cdk-stack.ts) file.\n\n# KMS key\n\nThis creates are KMS key with an alias to encrypt the data in the created services.\n\n```typescript\nconst kmsKey = new kms.Key(this, 'kmsKey', {\n      enableKeyRotation: true,\n    })\n\nkmsKey.addAlias(name)\n```\n\n# DynamoDb and Kinesis Data Stream\n\nThis is the creation of the DynamoDb with the Kinesis Data Stream.\n\n```typescript\nconst stream = new kinesis.Stream(this, 'Stream', {\n      streamName: `${name}-data-stream`,\n      encryption: kinesis.StreamEncryption.KMS,\n      encryptionKey: kmsKey,\n    })\n\n    const table = new dynamodb.Table(this, 'Table', {\n      tableName: name,\n      partitionKey: { name: 'pk', type: dynamodb.AttributeType.STRING },\n      billingMode: dynamodb.BillingMode.PAY_PER_REQUEST,\n      encryption: dynamodb.TableEncryption.CUSTOMER_MANAGED,\n      encryptionKey: kmsKey,\n      kinesisStream: stream,\n    })\n```\n\nThat adds to the DynamoDb, a Kinesis Data Stream, and connects it to the DynamoDb.\n\n![kinesis data stream]({{ site.baseurl }}/img/2021-10-26-aws_example_ddb_analytics_cdk/kinesis_data_stream.png)\n\n![kinesis data stream ddb]({{ site.baseurl }}/img/2021-10-26-aws_example_ddb_analytics_cdk/kinesis_data_stream_ddb.png)\n\n# Kinesis Data Firehose and S3 Bucket\n\nKinesis Data Firehose is the connection between the Kinesis Data Stream to the S3 Bucket.\n\nUnfortunately, Firehose stores the JSONs without a linefeed. Therefore it's a lambda for conversion is necessary.\n\nMore about that is described in this [post](https://medium.com/analytics-vidhya/append-newline-to-amazon-kinesis-firehose-json-formatted-records-with-python-f58498d0177a)\n\nIt looks like this.\n\n```typescript\n const firehoseBucket = new s3.Bucket(this, 'firehose-s3-bucket', {\n      bucketName: `${name}-firehose-s3-bucket`,\n      encryptionKey: kmsKey,\n    })\n\nconst processor = new lambda.NodejsFunction(this, 'lambda-function-processor', {\n  functionName: `${name}-firehose-converter`,\n  timeout: cdk.Duration.minutes(2),\n  bundling: {\n    sourceMap: true,\n  },\n})\n\nconst lambdaProcessor = new LambdaFunctionProcessor(processor, {\n  retries: 5,\n})\n\nconst s3Destination = new destinations.S3Bucket(firehoseBucket, {\n  encryptionKey: kmsKey,\n  bufferingInterval: cdk.Duration.seconds(60),\n  processor: lambdaProcessor,\n})\n\nconst firehoseDeliveryStream = new firehose.DeliveryStream(this, 'Delivery Stream', {\n  deliveryStreamName: `${name}-firehose`,\n  sourceStream: stream,\n  destinations: [s3Destination],\n})\n```\n\nThe delivery of the data to the S3 bucket is buffered. Here are the default values.\n\n![firehose-buffer]({{ site.baseurl }}/img/2021-10-26-aws_example_ddb_analytics_cdk/firehose_buffer.png)\n\n# Glue crawler\n\nAthena needs a structured table for the SQL queries. The Glue crawler creates this from the data in the S3 bucket.\n\nThe glue crawler isn't a L2 construct yet. So it needs a L1 construct. See [here](https://blog.phillipninan.com/a-no-nonsense-guide-to-aws-cloud-development-kit-cdk) more about L1 - L3.\n\nThere is already a [github issue](https://github.com/aws/aws-cdk/issues/8863) to create a L2 construct for the glue crawler.\n\n\n```typescript\nconst getSecurityConfiguration = new iam.PolicyDocument({\n      statements: [\n        new iam.PolicyStatement({\n          actions: ['glue:GetSecurityConfiguration'],\n          resources: ['*']\n        })\n      ]\n    })\n\n  const roleCrawler = new iam.Role(this, 'role crawler', {\n    roleName: `${name}-crawler-role`,\n    assumedBy: new iam.ServicePrincipal('glue.amazonaws.com'),\n    inlinePolicies: {\n      GetSecurityConfiguration: getSecurityConfiguration\n    }\n  })\n\n  const glueDb = new glue.Database(this, 'glue db', {\n    databaseName: `${name}-db`,\n  })\n\n  const glueSecurityOptions = new glue.SecurityConfiguration(this, 'glue security options', {\n    securityConfigurationName: `${name}-security-options`,\n    s3Encryption: {\n      mode: glue.S3EncryptionMode.KMS,\n    },\n  })\n\n  const crawler = new glue.CfnCrawler(this, 'crawler', {\n    name: `${name}-crawler`,\n    role: roleCrawler.roleArn,\n    targets: {\n      s3Targets: [\n        {\n          path: `s3://${firehoseBucket.bucketName}`,\n        },\n      ],\n    },\n    databaseName: glueDb.databaseName,\n    crawlerSecurityConfiguration: glueSecurityOptions.securityConfigurationName,\n  })\n\n  // const glueCrawlerLogArn = `arn:aws:logs:${cdk.Stack.of(this).region}:${cdk.Stack.of(this).account}:log-group:/aws-glue/crawlers:log-stream:${crawler.name}`\n  const glueCrawlerLogArn = `arn:aws:logs:${cdk.Stack.of(this).region}:${cdk.Stack.of(this).account}:log-group:/aws-glue/crawlers*` //:log-stream:${crawler.name}`\n\n  const glueTableArn = `arn:aws:glue:${cdk.Stack.of(this).region}:${cdk.Stack.of(this).account}:table/${glueDb.databaseName}/*`\n\n  const glueCrawlerArn = `arn:aws:glue:${cdk.Stack.of(this).region}:${cdk.Stack.of(this).account}:crawler/${crawler.name}`\n\n  roleCrawler.addToPolicy(\n    new iam.PolicyStatement({\n      resources: [\n        glueCrawlerLogArn,\n        glueTableArn,\n        glueDb.catalogArn,\n        glueDb.databaseArn,\n        kmsKey.keyArn,\n        firehoseBucket.bucketArn,\n        `${firehoseBucket.bucketArn}/*`,\n        glueCrawlerArn,\n      ],\n      actions: ['logs:*', 'glue:*', 'kms:*', 'S3:*'],\n    })\n  )\n```\n\nFor test purposes, it's enough to run the crawler before any analysis. Scheduling is also possible.\n\n![glue-run-crawler]({{ site.baseurl }}/img/2021-10-26-aws_example_ddb_analytics_cdk/glue_run_crawler.png)\n\nThat creates this table, which is accessible by Athena.\n\n![glue-table]({{ site.baseurl }}/img/2021-10-26-aws_example_ddb_analytics_cdk/glue_table.png)\n\n# Athena\n\nFor Athena it needs an S3 bucket for the query results and, for better isolation to other projects, a workgroup.\n\n```typescript\nconst athenaQueryResults = new s3.Bucket(this, 'query-results', {\n      bucketName: `${name}-query-results`,\n      encryptionKey: kmsKey,\n    })\n\nnew athena.CfnWorkGroup(this, 'analytics-athena-workgroup', {\n  name: `${name}-workgroup`,\n  workGroupConfiguration: {\n    resultConfiguration: {\n      outputLocation: `s3://${athenaQueryResults.bucketName}`,\n      encryptionConfiguration: {\n        encryptionOption: 'SSE_KMS',\n        kmsKey: kmsKey.keyArn,\n      },\n    },\n  },\n})\n```\n\nHow to anylyze the data see also [here]({{ site.baseurl }}/aws/2021/08/27/aws_example_ddb_analytics/)\n\n# Cost Alert üí∞\n\n‚ö†Ô∏è Don't forget to destroy after testing. Kinesis Data Streams has [costs](https://aws.amazon.com/kinesis/data-streams/pricing/) per hour\n\n\n# Code\n\n[https://github.com/JohannesKonings/test-aws-dynamodb-athena-cdk](https://github.com/JohannesKonings/test-aws-dynamodb-athena-cdk)\n\n"},"__N_SSG":true}